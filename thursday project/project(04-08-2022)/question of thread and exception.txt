QUESTION ON THREAD

Q1.difference between
i) class lock and object lock
ANS:--
Object Level Locks: − It can be used when you want non-static method or non-static block of the code should be accessed by only one thread.
Example :-
public class ObjectLevelLockExample {
   public void objectLevelLockMethod() {
      synchronized (this) {
         //DO your stuff here
      }
   }
}

Class Level locks:− It can be used when we want to prevent multiple threads to enter the synchronized block in any of all available instances on runtime. It should always be used to make static data thread safe.
Example :-
public class ClassLevelLockExample {
   public void classLevelLockMethod() {
      synchronized (ClassLevelLockExample.class) {
         //DO your stuff here
      }
   }
}

ii) thread and process
ANS:--
 Thread:- It simply refers to the smallest units of the particular process. It has the ability to execute different parts of the program at the same time.  

Process:- It simply refers to a program that is in execution i.e., an active program. A process can be handled using PCB (Process Control Block)

iii) user thread and daemon thread
ANS:--
User Thread (Non-Daemon Thread): In Java, user threads have a specific life cycle and its life is independent of any other thread. JVM  waits for any of the user threads to complete its tasks before terminating it. When user threads are finished, JVM terminates the whole program along with associated daemon threads. 

Daemon Thread: In Java, daemon threads are basically referred to as a service provider that provides services and support to user threads. There are basically two methods available in thread class for daemon thread: setDaemon() and isDaemon()
....................


Q2. what is notify() and notifyall()
ANS:--
notify(): The notify() method is defined in the Object class, which is Java’s top-level class. It’s used to wake up only one thread that’s waiting for an object, and that thread then begins execution. The thread class notify() method is used to wake up a single thread.

notifyAll(): The notifyAll() wakes up all threads that are waiting on this object’s monitor. A thread waits on an object’s monitor by calling one of the wait methods. The awakened threads will not be able to proceed until the current thread relinquishes the lock on this object.
.................


Q3. what is blocking queue
ANS:--
BlockingQueue , represents a queue which is thread safe to put elements into, and take elements out of from. In other words, multiple threads can be inserting and taking elements concurrently from a Java BlockingQueue , without any concurrency issues arising.
Example - 
public class Message {
    private String msg;
    
    public Message(String str){
        this.msg=str;
    }

    public String getMsg() {
        return msg;
    }

}
....................


Q4. what is synchroniztion process argument it
ANS
Synchronization in java is the capability to control the access of multiple threads to any shared resource. In the Multithreading concept, multiple threads try to access the shared resources at a time to produce inconsistent results. The synchronization is necessary for reliable communication between threads
Types of Synchronization
i.)Process Synchronization
The process is nothing but a program under execution. It runs independently isolated from another process. The resources like memory and CPU time, etc. are allocated to the process by the operation System.
ii.)Thread Synchronization:
Thread synchronization is two types
1.Mutual Exclusive:
2. Cooperation (Inter Thread Communication in java)
..................


Q5. can we start a thread twice
ANS:--
No, it's not at all possible to restart a thread once a thread gets started and completes its execution. Thread only runs once and if you try to run it for a second time, then it will throw a runtime exception i.e., java.lang.IllegalThreadStateException. 

Example: 
public class TestThreadTwice1 extends Thread{   
public void run(){   
System.out.println(" thread is executing now........");   
}   
public static void main(String args[]){   
TestThreadTwice1 t1=new TestThreadTwice1();   
t1.start();   
t1.start();   
}   
}   
.................


Q6. What is the purpose of wait() method in Java?
ANS:--
The wait() method is provided by the Object class in Java. This method is used for inter-thread communication in Java. The java.lang.Object.wait() is used to pause the current thread, and wait until another thread does not call the notify() or notifyAll() method.  
syntax :
public final void wait()
..................


Q7.Can we call run() method of a Thread class
ANS:--
Yes, we can call run() method of a Thread class but then it will behave like a normal method. To actually execute it in a Thread, we need to start it using **Thread.start()** method.
..........................


Q8.What will happen if we don’t override Thread class run() method
public void run() {
    if (target != null) {
        target.run();
    }
}
public class TestThread extends Thread {
	public static void main(String args[]){
		Thread t = new TestThread();
		System.out.println("Before starting thread");
		t.start();
		System.out.println("After starting thread");
	}
}

OUTPUT
Before starting thread
After starting thread
..............................


Q9. What will be the output of the following Java code?
    class newthread extends Thread 
    {
	Thread t;
	newthread()
        {
	    t = new Thread(this,"My Thread");
	    t.start();
	}
	public void run()
        {
            try
            {
                t.join()   
	        System.out.println(t.getName());
            }
            catch(Exception e)
            {
            System.out.print("Exception");
            }
	}
    }
    class multithreaded_programing
    {
        public static void main(String args[])
        {
            new newthread();        
        }
    }
.........................
Q10.class newthread extends Thread
    {
	Thread t;
	newthread()
        {
	    t = new Thread(this,"New Thread");
	    t.start();
t1 = new Thread(this,"Thread_1");
	    t2 = new Thread(this,"Thread_2");
	    t1.start();
	    t2.start();
	}
	public void run()
        {
	   System.out.println(t.isAlive());
 t2.setPriority(Thread.MAX_PRIORITY);	
	    System.out.print(t1.equals(t2));
	}
    }
    class multithreaded_programing
    {
        public static void main(String args[])
        {
            new newthread();        
        }
    }
-------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
QUESTION ON EXCEPTION

Q1.can be use try block instead of finally and catch
ANS:--
Yes, It is possible to have a try block without a catch block by using a final block.
Example :-
public class TryBlockWithoutCatch {
   public static void main(String[] args) {
      try {
         System.out.println("Try Block");
      } finally {
         System.out.println("Finally Block");
      }
   }
}
........................


Q2. explain throwable and explain method
ANS:--
The Throwable class is the superclass of every error and exception in the Java language. Only objects that are one of the subclasses this class are thrown by any “Java Virtual Machine” or may be thrown by the Java throw statement. For the motives of checking of exceptions during compile-time, Throwable and any subclass of Throwable which is not also a subclass of either Error or RuntimeException are considered as checked exceptions.

Throwable class is the root class of Java Exception Hierarchy and is inherited by two subclasses: 
1.Exception 
2.Error 
Example: 
Class MyThrowable extends Throwable{ 
//Here the user can create his own custom throwable 
}
Class GFG{ 
Public void test() throws MyThrowable{ 
// the custom throwable created can be used as follows 
throw new MyThrowable(); 
} 
} 
.........................


Q3. Can exception handling resolve exceptions?
ANS:--
Exception handling can catch but not resolve exceptions. true: Exception handling enables programmers to write robust and fault-tolerant programs. Exception handling can resolve exceptions. The throw statement is used to throw an exception
........................................


Q4. Can runtime exception be caught in Java?
ANS:--
Catching Exception will catch both checked and runtime exceptions. Runtime exceptions represent problems that are a direct result of a programming problem, and as such shouldn't be caught since it can't be reasonably expected to recover from them or handle them.
............................


5. what is arrayindexoutbound exception
ANS:--
The ArrayIndexOutOfBounds exception is thrown if a program tries to access an array index that is negative, greater than, or equal to the length of the array. The ArrayIndexOutOfBounds exception is a run-time exception. Java's compiler does not check for this error during compilation.
................................


Q6. class Base extends Exception {}
class Derived extends Base  {}
 
public class Main {
  public static void main(String args[]) {
   // some other stuff
   try {
       // Some monitored code
       throw new Derived();
    }
    catch(Base b)     { 
       System.out.println("Caught base class exception"); 
    }
    catch(Derived d)  { 
       System.out.println("Caught derived class exception"); 
    }
  }
} 

OUTPUT
Compiler Error because base class exception is caught before derived class


...........................
Q7.class Test
{
    public static void main(String[] args)
{  try
        {  int a[]= {1, 2, 3, 4};
            for (int i = 1; i <= 4; i++)
            {   System.out.println ("a[" + i + "]=" + a[i] + "n");
            } }
       catch (Exception e)   {
            System.out.println ("error = " + e);
        }   catch (ArrayIndexOutOfBoundsException e) {
            System.out.println ("ArrayIndexOutOfBoundsException");
        }}}
OUTPUT	
a = 0
Divide by zero error
inside the finally block
......................................


Q8.Predict the output of the following program.
class Test
{
    String str = "a";
    void A(){
        try {
            str +="b";
            B();
        }  catch (Exception e)
        {
            str += "c";
        }
    }   void B() throws Exception
    {
        try   {
            str += "d";
            C();
        }    catch(Exception e)
        {
            throw new Exception();
        } finally
        {
            str += "e";
        }
        str += "f";
  } void C() throws Exception
    {   throw new Exception();
    } void display() {
        System.out.println(str);
    }  public static void main(String[] args)
    {  Test object = new Test();
        object.A();
        object.display();
    }}

OUTPUT
abdec
Explanation: 
'throw' keyword is used to explicitly throw an exception. finally block is always executed even when an exception occurs. Call to method C() throws an exception. Thus, control goes in catch block of method B() which again throws an exception. So, control goes in catch block of method A().
.....................................


Q9.Which of these is a super class of all errors and exceptions in the Java language?
ANS:--
Throwable
All the errors and exception types are subclasses of the built in class Throwable in the java language. Throwable class is the superclass of all errors and exceptions in the Java language.
........................................


Q10.what is checked and unchecked exception
ANS:--
Unchecked Exception:
Checked Exceptions occur at the runtime of the program. These are also known as Runtime Exceptions. It is not a requirement to handle or catch them at compile time. These are mainly due to the mistakes in the program.
Checked Exceptions:
Checked Exceptions occur at the compile time of the program. These exceptions should be either caught or handled during compile time. If we do not catch or handle them then the compiler will throw a compilation error. These are the sub classes of the Exception class.
----------------------------------------------------------
----------------------------------------------------------
-------------------------------------------------------